<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>7fff</title>
  <id>http://7fff.com/</id>
  <link href="http://7fff.com/"/>
  <link href="http://7fff.com/feed.xml" rel="self"/>
  <updated>2025-01-03T16:53:00-06:00</updated>
  <author>
    <name>jgn</name>
  </author>
  <entry>
    <title>Radio buttons, checkboxes, affirmative choices, and consents</title>
    <link rel="alternate" href="http://7fff.com/2025/01/radio-buttons-checkboxes-affirmative-choices-and-consents/"/>
    <id>http://7fff.com/2025/01/radio-buttons-checkboxes-affirmative-choices-and-consents/</id>
    <published>2025-01-03T16:53:00-06:00</published>
    <updated>2025-01-04T16:35:54-06:00</updated>
    <author>
      <name>jgn</name>
    </author>
    <content type="html">&lt;p&gt;Here are some notes about radio button and checkbox defaults for times when you need an affirmative
answer.&lt;/p&gt;

&lt;h3&gt;Affirmative choices&lt;/h3&gt;

&lt;p&gt;The Nielsen/Norman Group (no relation) has
&lt;a href="https://www.nngroup.com/articles/radio-buttons-default-selection/"&gt;an interesting article on radio buttons by Kara Pernice&lt;/a&gt;.
Its advice is sound, but I want to note a case where there could perhaps be even more obviousness.&lt;/p&gt;

&lt;p&gt;The next time you design a radio button interface, I&amp;#39;d like to advise you to think about an
additional choice, which is essentially a default choice representing that a choice is not made.&lt;/p&gt;

&lt;p&gt;Radio buttons provide for a mutually-exclusive choice. For instance, an airline serves two meals to
first-class customers, one with pasta, one with rice. You can only pick one.&lt;/p&gt;

&lt;div class="quote-rendering"&gt;
&lt;input type="radio" name="pasta_or_rice" checked&gt; pasta &lt;br/&gt;
&lt;input type="radio" name="pasta_or_rice"&gt; rice
&lt;/div&gt;

&lt;p&gt;But this hides the implied third choice, which is not to have any meal. Better:&lt;/p&gt;

&lt;div class="quote-rendering"&gt;
&lt;input type="radio" name="pasta_or_rice_2" checked&gt; pasta &lt;br/&gt;
&lt;input type="radio" name="pasta_or_rice_2"&gt; rice &lt;br/&gt;
&lt;input type="radio" name="pasta_or_rice_2"&gt; neither
&lt;/div&gt;

&lt;p&gt;This may become important for legal requests for a formal, affirmative choice. For example, a health
survey might ask:&lt;/p&gt;

&lt;div class="quote-rendering"&gt;
Are you pregnant? &lt;p/&gt;

&lt;input type="radio" name="no_yes" checked&gt; No &lt;br/&gt;
&lt;input type="radio" name="no_yes"&gt; Yes
&lt;/div&gt;

&lt;p&gt;But this doesn&amp;#39;t allow the choice to say neither No nor Yes. Also, suppose you are a healthcare
company that asks this question, and you don&amp;#39;t want to be blamed if the user gets the wrong
treatment according to this answer. The user might say: I was in a rush and took all of the default
answers; the form reported this answer as &amp;quot;No,&amp;quot; but it was actually &amp;quot;Yes.&amp;quot;&lt;/p&gt;

&lt;p&gt;Some people try to solve this with a form where neither choice is indicated by default, and the user
is forced to choose one or the other:&lt;/p&gt;

&lt;div class="quote-rendering"&gt;
&lt;input type="radio" name="no_yes_2"&gt; No &lt;br/&gt;
&lt;input type="radio" name="no_yes_2"&gt; Yes
&lt;/div&gt;

&lt;p&gt;I don&amp;#39;t like this one, because the form typically can&amp;#39;t be submitted with no choice, or there is no
way undo choosing one of the options (there&amp;#39;s no way to go back to the &amp;quot;neither is picked&amp;quot;
scenario).&lt;/p&gt;

&lt;p&gt;So this is missing the third option, which in some forms is &amp;quot;prefer not to say,&amp;quot; or &amp;quot;not reported.&amp;quot;
Those two phrasings of the answer are in fact a little pushy. Does the user actually &lt;em&gt;prefer&lt;/em&gt; not to
say, or are they compelled not to say? Additionally, &amp;quot;not reported&amp;quot; is not quite right, because the
user is reporting something: The user is reporting neither No or Yes. And this third option should
be the default:&lt;/p&gt;

&lt;div class="quote-rendering"&gt;
&lt;input type="radio" name="no_yes_3"&gt; No &lt;br/&gt;
&lt;input type="radio" name="no_yes_3"&gt; Yes &lt;br/&gt;
&lt;input type="radio" name="no_yes_3" checked&gt; No choice made &lt;br/&gt;
&lt;/div&gt;

&lt;p&gt;Now if a user accidentally takes the default answer, the healthcare company is protected because
they can show that no choice was made. If a procedure must be conducted that depends on
pregnancy status, they can ask again in a different setting. Additionally, the confidence in the No
or Yes answer is enhanced, because the user has to make an affirmative decision to choose something
other than &amp;quot;No choice made.&amp;quot;&lt;/p&gt;

&lt;p&gt;One last thing: If you implement this, make sure that the date/time of the choice is captured in the
database. (It can also help to put the statement itself into the database.) People go in and out of
the state of pregnancy, and you should capture that so that it&amp;#39;s clear that the answer wasn&amp;#39;t
provided for all time. Indeed, with this in mind, the question &amp;quot;are you pregnant?&amp;quot; might be changed
to:&lt;/p&gt;

&lt;div class="quote-rendering"&gt;
On this date, 3-Jan-2025, are you pregnant?
&lt;/div&gt;

&lt;p&gt;By this means the wording for the user and the data captured on the back-end is aligned.&lt;/p&gt;

&lt;h3&gt;Consents&lt;/h3&gt;

&lt;p&gt;There&amp;#39;s a similar problem with consents.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s say that you&amp;#39;re a healthcare company and want to satisfy HIPAA requirements and encrypt
personal data when in transit. In most cases, email is encrypted end-to-end with TLS, but you know
of cases where this is not feasible (because the patient&amp;#39;s email server can&amp;#39;t handle it). Therefore,
you want to ask the user for consent to send unencrypted email. With this consent, you may go ahead
and send unencrypted email. Without this consent, you continue not sending such email. Thus, not
sending the email is the default, whether or not you capture a consent decision. No one says &amp;quot;please
do not send me unencrypted email&amp;quot; up front.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s another example: The request to consent to treatment. Without such consent, you won&amp;#39;t be
treated.&lt;/p&gt;

&lt;p&gt;What this means is that it is not appropriate to use radio buttons to collect a Yes or No answer.
This is wrong:&lt;/p&gt;

&lt;div class="quote-rendering"&gt;
&lt;input type="radio" name="no_yes_4" checked&gt; No &lt;br/&gt;
&lt;input type="radio" name="no_yes_4"&gt; Yes
&lt;/div&gt;

&lt;p&gt;Don&amp;#39;t do this. The &amp;quot;No&amp;quot; answer is meaningless, because without consent, the email will already not
be sent. Essentially, the user is being asked to consent -- or do nothing. The best interface is a
checkbox or possibly a button:&lt;/p&gt;

&lt;div class="quote-rendering"&gt;
In most cases, BigHealth will send email that is encrypted end-to-end, but in some cases, this is
not feasible for technical reasons. Do you consent to email being sent unencrypted if the encryption
can't be accomplished? &lt;p/&gt;

&lt;input type="checkbox" name="consent-1"&gt; I consent to allowing unencrypted email
&lt;/div&gt;

&lt;p&gt;Note as well that this form should only be presented when the user has not given consent. (If the
user has given consent, then you should show a form providing for the withdrawal of consent: See
below.) As for the affirmative radio button answers, the date/time should be collected on the back
end. Additionally, the table should not have a column for Yes/No values. It should be a table called
&amp;quot;consents&amp;quot; where each row is just is the date/time. The appearance of such a row means that on that
date/time, the user consented. But this is probably not quite enough.&lt;/p&gt;

&lt;p&gt;You also want to allow for the withdrawal of consent. In this case the language would be something like this:&lt;/p&gt;

&lt;div class="quote-rendering"&gt;

In most cases, BigHealth will send email that is encrypted end-to-end, but in some cases, this is
not feasible for technical reasons. On 3-Jan-2025, you consented to this activity.
&lt;p/&gt;
Do you withdraw your consent to email being sent unencrypted if the encryption can't be accomplished?
&lt;p/&gt;
&lt;input type="checkbox" name="consent-withdrawal-1"&gt; I withdraw my consent to allowing unencrypted email
&lt;/div&gt;

&lt;p&gt;Now, on the back-end, you probably want a table called &amp;quot;consent decisions.&amp;quot; There is a row with
columns defining who consented, what the consent statement was about, a &amp;quot;decision,&amp;quot; with values
&amp;quot;consented&amp;quot; or &amp;quot;withdrawn,&amp;quot; and a column for the date/time of the decision. It can help to have a
separate table of consent statements, and rather than showing the literal language on the front-end,
use the language from the table so that everything ties up properly. I have seen companies
accidentally introduce drift into this process where the consent statement in the database does not
match up with the language presented to the user (and sometimes, this language will mismatch paper
versions of the consent form.)&lt;/p&gt;

&lt;p&gt;By these means, you capture affirmative answers to decisions and consent decisions without confusing
the user and you represent them in the database in such a way that there is clarity about the time
relations to the decisions and/or consents.&lt;/p&gt;

&lt;p&gt;Last thing: The UK has a
&lt;a href="https://ico.org.uk/for-organisations/uk-gdpr-guidance-and-resources/lawful-basis/consent/what-is-valid-consent/#what4"&gt;great document&lt;/a&gt;
(citing relevant portions of the GDPR) that outlines how consents should work. Consent must be&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;freely given&lt;/li&gt;
&lt;li&gt;specific and informed&lt;/li&gt;
&lt;li&gt;unambiguous&lt;/li&gt;
&lt;li&gt;explicit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On &lt;a href="https://ico.org.uk/for-organisations/uk-gdpr-guidance-and-resources/lawful-basis/consent/how-should-we-obtain-record-and-manage-consent/#how4"&gt;another page&lt;/a&gt;,
they note that you should consider refreshes of consent:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;&lt;p&gt;You should also consider whether to automatically refresh consent at appropriate intervals. How
often it’s appropriate to do so will depend on the particular context, including people’s
expectations, whether you are in regular contact, and how disruptive repeated consent requests
would be to the individual. If in doubt, we recommend you consider refreshing consent every two
years – but you may be able to justify a longer period, or need to refresh more regularly to
ensure good levels of trust and engagement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If/when you change the consent statement, you will need to re-solicit consent again for the revised
language. You will need to ensure that your back-end can support the semantics of the older consents
if the user has not had an opportunity to re-consent.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How to reverse (revert) some Thor actions</title>
    <link rel="alternate" href="http://7fff.com/2024/12/how-to-reverse-revert-some-thor-actions/"/>
    <id>http://7fff.com/2024/12/how-to-reverse-revert-some-thor-actions/</id>
    <published>2024-12-04T08:26:00-06:00</published>
    <updated>2025-01-03T16:52:08-06:00</updated>
    <author>
      <name>jgn</name>
    </author>
    <content type="html">&lt;p&gt;It&amp;#39;s pretty cool that in many cases Rails migrations can reverse their action when you use
the &lt;code&gt;destroy&lt;/code&gt; command. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;% rails generate model user name:string
      invoke  active_record
      create    db/migrate/20241204143118_create_users.rb
      create    app/models/user.rb
      invoke    test_unit
      create      test/models/user_test.rb
      create      test/fixtures/users.yml
% rails destroy model user
      invoke  active_record
      remove    db/migrate/20241204143118_create_users.rb
      remove    app/models/user.rb
      invoke    test_unit
      remove      test/models/user_test.rb
      remove      test/fixtures/users.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So that&amp;#39;s pretty fun. Rails migrations are built on Thor, but there&amp;#39;s not a lot of
documentation on how to reverse a Thor action.&lt;/p&gt;

&lt;p&gt;I had to study the code and its specs to figure this out, and even then it took some
noodling around.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s how to do it. In your Thor file, you create actions like so. Note the setting
of &lt;code&gt;self.behavior&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;  desc "prepend-before", "prepend to a file before a match"
  def prepend_before
    # behavior: Does not inject if the content exists *anywhere* in the file
    inject_into_file "doc/README", "more content\n", before: "__end__"
  end

  desc "revoke-prepend", "revoke prepend"
  def revoke_prepend
    self.behavior = :revoke
    inject_into_file "doc/README", "more content\n", :before =&amp;gt; "__end__"
  end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s what run the looks like.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;% thor ex:prepend-before
      insert  doc/README
% thor ex:revoke-prepend
    subtract  doc/README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You&amp;#39;re welcome. Note that not all Thor actions allow for revocation: At some point
I&amp;#39;ll add a list of such actions here.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Arrays are rarely the natural choice in bash; use files</title>
    <link rel="alternate" href="http://7fff.com/2024/12/arrays-are-rarely-the-natural-choice-in-bash-use-files/"/>
    <id>http://7fff.com/2024/12/arrays-are-rarely-the-natural-choice-in-bash-use-files/</id>
    <published>2024-12-02T09:28:00-06:00</published>
    <updated>2025-01-03T16:52:08-06:00</updated>
    <author>
      <name>jgn</name>
    </author>
    <content type="html">&lt;p&gt;So I wanted to format some text whereby I specify a width and a utility fills and wraps the
lines.&lt;/p&gt;

&lt;p&gt;Example input text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The output for `ls-files` is incredibly limited, right? That's because the
typical use case is to list files of a certain type.

You can do

  ls-files -c  # show cached (tracked)
  ls-files -d  # show unstaged deletions
  ls-files -u  # show unmerged

There is also an option -t that shows status tag (though the tags are weird:
for instance, the tag for a tracked file is: H).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fortunately there&amp;#39;s a nice tool called &lt;code&gt;fmt&lt;/code&gt; that can do pretty much what we want.&lt;/p&gt;

&lt;p&gt;You can do &lt;code&gt;fmt -w 50 &amp;lt;text.txt&lt;/code&gt; and get the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The output for `ls-files` is incredibly limited,
right? That's because the typical use case is to
list files of a certain type.

You can do

  ls-files -c  # show cached (tracked) ls-files -d
  # show unstaged deletions ls-files -u  # show
  unmerged

There is also an option -t that shows status tag
(though the tags are weird: for instance, the tag
for a tracked file is: H).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well that&amp;#39;s not right. I would like it to leave lines alone that have fewer characters than
the specified width. In other words, I want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The output for `ls-files` is incredibly limited,
right? That's because the typical use case is to
list files of a certain type.

You can do

  ls-files -c  # show cached (tracked)
  ls-files -d  # show unstaged deletions
  ls-files -u  # show unmerged

There is also an option -t that shows status tag
(though the tags are weird: for instance, the tag
for a tracked file is: H).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I could do this pretty fast in Ruby, but in this case, I needed it in shell (for bash), and
I didn&amp;#39;t want to incur the startup time of a Ruby script called from a bash script.&lt;/p&gt;

&lt;p&gt;My first instinct was to use arrays, because that feels natural to me as a programmer -- I might
split on newlines and do something with the result.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what I came up with. Note that on my target, the Mac, the latest version of bash is 3.2
(for licensing reasons). This means I couldn&amp;#39;t use some of the newer array functions from bash 4.&lt;/p&gt;

&lt;p&gt;(By the way, I do know the bash convention of using all uppercase for environment variable
names, but that&amp;#39;s just too ugly. Sorry.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nb"&gt;shift
&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="nv"&gt;last_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0

&lt;span class="nv"&gt;format_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fmt"&lt;/span&gt;    &lt;span class="c"&gt;# or `par -j`&lt;/span&gt;

format &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;local &lt;/span&gt;formatted

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-gt&lt;/span&gt; 1 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nv"&gt;formatted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'%s'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$format_command&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;
    output+&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$formatted&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;fi
  &lt;/span&gt;output+&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;for &lt;/span&gt;line &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c"&gt;# hit a newline; format everything accumulated in the buffer&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;format
  &lt;span class="c"&gt;# hit a short line; add it to the output unformatted&lt;/span&gt;
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-eq&lt;/span&gt; 0 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-le&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;output+&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# a regular line; add it to the buffer for later formatting.&lt;/span&gt;
  &lt;span class="k"&gt;else
    &lt;/span&gt;buffer+&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt; "&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;fi
done

&lt;/span&gt;format

&lt;span class="nv"&gt;last_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt; &lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="k"&gt;))&lt;/span&gt;
&lt;span class="nb"&gt;unset&lt;/span&gt; &lt;span class="s2"&gt;"output[&lt;/span&gt;&lt;span class="nv"&gt;$last_index&lt;/span&gt;&lt;span class="s2"&gt;]"&lt;/span&gt;

&lt;span class="c"&gt;# Split elements in original on newline&lt;/span&gt;
&lt;span class="nv"&gt;split_on_newline&lt;/span&gt;&lt;span class="o"&gt;=()&lt;/span&gt;
&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
    &lt;/span&gt;split_on_newline+&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'%s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;output&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;split_on_newline&lt;/span&gt;&lt;span class="p"&gt;[@]&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So as you can see, there&amp;#39;s rather a lot of wrangling of arrays: getting lines added from a file.
There&amp;#39;s also the syntax burden of bash arrays, which is non-trivial. I kept looking at this,
and after awhile it just seemed dumb. Why not write a more routine bash command that reads
from STDIN and writes to STDOUT?&lt;/p&gt;

&lt;p&gt;So I came up with this, which is shorter and seems more natural:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight shell"&gt;&lt;code&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;30
&lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"fmt"&lt;/span&gt;
&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;

&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;
&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-n&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;

&lt;span class="k"&gt;while &lt;/span&gt;&lt;span class="nv"&gt;IFS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; &lt;span class="nt"&gt;-r&lt;/span&gt; line&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do
  if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nt"&gt;-z&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-ne&lt;/span&gt; 0 &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'%s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$buffer&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nv"&gt;$command&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$width&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
  &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-eq&lt;/span&gt; 0 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${#&lt;/span&gt;&lt;span class="nv"&gt;line&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;-lt&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$width&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'%s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;else
    &lt;/span&gt;buffer+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$line&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    buffer+&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;" "&lt;/span&gt;
  &lt;span class="k"&gt;fi
done
&lt;/span&gt;&lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'%s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$buffer&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; | &lt;span class="nv"&gt;$command&lt;/span&gt; &lt;span class="nt"&gt;-w&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$width&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one takes two parameters, the first being the width, and the second being the command
to use (if one doesn&amp;#39;t want to use the default, &lt;code&gt;fmt&lt;/code&gt;). So if you like, you can use &lt;code&gt;par&lt;/code&gt; to
justify the text. For example: &lt;code&gt;./wrap 50 &amp;quot;par -j&amp;quot;&lt;/code&gt; gets you:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;The output  for `ls-files` is  incredibly limited,
right? That's  because the typical use  case is to
list files of a certain type.

You can do

  ls-files -c  # show cached (tracked)
  ls-files -d  # show unstaged deletions
  ls-files -u  # show unmerged

There is also  an option -t that  shows status tag
(though the tags are  weird: for instance, the tag
for a tracked file is: H).
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Using Google Apps Script to convert a Word document to Google Docs</title>
    <link rel="alternate" href="http://7fff.com/2024/09/using-google-apps-script-to-convert-a-word-document-to-google-docs/"/>
    <id>http://7fff.com/2024/09/using-google-apps-script-to-convert-a-word-document-to-google-docs/</id>
    <published>2024-09-09T09:08:00-05:00</published>
    <updated>2024-12-02T08:46:56-06:00</updated>
    <author>
      <name>jgn</name>
    </author>
    <content type="html">&lt;p&gt;I recently wanted to write code to convert a Microsoft Word document to a Google Doc. (In fact,
I wanted to convert many such Word docs.)&lt;/p&gt;

&lt;p&gt;This turned out to be pretty obscure. Here&amp;#39;s how to do it (ids changed):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;function go() {
  convertWordDocToGoogleDoc(
    "15qYN30uJAsMhKxUb1nbCoE09NT7-FPZs",
    "Converted",
    "1-Grx_yhWWOA73-1dnbEI6JlfHkDXxzr6"
  );
}

function convertWordDocToGoogleDoc(sourceFileId, targetFileName, targetFolderId) {
  // Convert a Word doc to a Google doc
  // (this was a royal pain to figure out)
  let targetResource = {
    'name':     targetFileName,
    'mimeType': MimeType.GOOGLE_DOCS,
    'parents':  [targetFolderId]
  };
  // Notice: This is done with the *Drive* service, not the DocumentApp
  // To add the Drive Service, click the "+" by Services in the left-hand
  // pane and select Drive API.
  let targetFile = Drive.Files.copy(targetResource, sourceFileId);

  return targetFile.id;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>The New York Times' mobile 'Today's Paper' could be a lot better</title>
    <link rel="alternate" href="http://7fff.com/2024/03/the-new-york-times-mobile-today-s-paper-could-be-a-lot-better/"/>
    <id>http://7fff.com/2024/03/the-new-york-times-mobile-today-s-paper-could-be-a-lot-better/</id>
    <published>2024-03-30T11:37:00-05:00</published>
    <updated>2024-03-30T12:23:07-05:00</updated>
    <author>
      <name>jgn</name>
    </author>
    <content type="html">&lt;p&gt;I like to read the paper. On paper. I like to read a paper with a lot of news, if not the most
news (compared to other papers). That would seem to be the New
York Times. I subscribe to home delivery with a Friday, Saturday, Sunday 
subscription which also gets me the online/mobile experience. What I like about the printed
edition is that the importance of articles is indicated by size and placement, and I can scan
more headlines at a glance. The pictures are bigger. Oh, and it&amp;#39;s not online. I spend most of
my week looking at a computer screen, and it&amp;#39;s a nice treat to do some old-fashioned reading
from print.&lt;/p&gt;

&lt;p&gt;Recently, however, my eyes have gotten worse, and for whatever
reason, the print seems to be lighter. I think the paper is printed here in Minnesota and sometimes
the print is light enough that it&amp;#39;s hard to read, even when under a bright light. This has made
me wonder about switching to the mobile edition, where I can control brightness (and font size,
though I&amp;#39;m satisfied with the default font size on mobile).&lt;/p&gt;

&lt;p&gt;But remember that I like the print edition&amp;#39;s sequencing of articles, the size of headlines, and
so forth. This has made me wonder whether I would really be satisfied with the Today&amp;#39;s Paper
feature. You can see the web version of this by going to &lt;a href="https://www.nytimes.com/section/todayspaper"&gt;&lt;a href="https://www.nytimes.com/section/todayspaper"&gt;https://www.nytimes.com/section/todayspaper&lt;/a&gt;&lt;/a&gt;. There are subtle differences between the web and mobile
experiences which I will touch on. Also, I should note that there was an old site called
app.nytimes.com, which has been discontinued. This was an earlier attempt by the Times to simulate
the day&amp;#39;s paper. I think it failed because it would re-render the articles into print + pictures,
and thus didn&amp;#39;t have some of the really cool digital features that the Times has created over the
years. There&amp;#39;s also the replica edition, which I don&amp;#39;t like because the user experience
is awkward and requires a lot of clicks. Also, I want to note that there are distinct advantages
to the electronic editions: It&amp;#39;s easier to share an article; and you can read and participate
in the comment section.&lt;/p&gt;

&lt;p&gt;So here I want to describe some of the differences between the printed version of the Times, and
the Today&amp;#39;s Paper version, in particular the mobile version on an iPad. For this comparison,
I&amp;#39;ll be comparing the print and mobile editions for March 30, 2024.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First off, when you get the printed Times, you can just start reading it immediately. On the
web, you could bookmark the Today&amp;#39;s Paper page. In the mobile experience, you have to navigate
through the Sections button, then scroll to near the bottom, and select Today&amp;#39;s Paper. &lt;strong&gt;Suggestion:
Make it much easier to get to Today&amp;#39;s Paper, and see the articles right away. If you have to, package it as a separate app.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In the web version, the date is shown in a dropdown, and you can navigate to another day.
&lt;strong&gt;Suggestions: (1) Show the date in the app on the mobile edition; (2) Bring the ability to see Today&amp;#39;s Paper
for any date to the mobile edition.&lt;/strong&gt; This latter point is more important than it might seem. When
I&amp;#39;m traveling for work or on vacation, sometimes I miss a day or two. I&amp;#39;d like to be able to catch up easily -- but I
can&amp;#39;t.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Here&amp;#39;s the top headline in the print edition: &amp;quot;Pandemic Effect: Absence From Schools is Soaring.&amp;quot;
Mobile: &amp;quot;Why School Absences have &amp;#39;Exploded&amp;#39; Almost Everywhere.&amp;quot; &lt;strong&gt;Suggestion: Make the headlines
the same.&lt;/strong&gt; While I&amp;#39;m at it, have the URL slug be the same. Why? So that I can be assured that
I am talking about the same article as it was titled in print. Look, you&amp;#39;re calling this feature
Today&amp;#39;s &lt;em&gt;Paper&lt;/em&gt;. Do us a favor, and support those semantics -- follow the paper version. If you
like, call it Today&amp;#39;s Edition instead of Today&amp;#39;s Paper. But at present, it&amp;#39;s not Today&amp;#39;s &lt;em&gt;Paper&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Here is my number one most critical concern: It is not easy to read the Times &lt;em&gt;in its print sequence&lt;/em&gt;
in the mobile edition.&lt;/strong&gt; The main issue is that to get to the next article as offered in the
print edition, you have to&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Scroll down so as to expose the back button (&amp;lt;).&lt;/li&gt;
&lt;li&gt;Tap the back button.&lt;/li&gt;
&lt;li&gt;Tap the next article (or scroll to it if it&amp;#39;s below -- note that the iPad and iPhone
experiences are a bit different in that on the phone all of the articles are on a list,
while on the iPad the &amp;quot;next&amp;quot; article might be to the right of the one you just read.
In any case, I don&amp;#39;t want to scroll, tap, and tap.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Suggestion: Please make it easier for me. Either
   add a Next button (that means the next button in the Today&amp;#39;s Paper sequence), or let me
   swipe for the next article.&lt;/strong&gt; Would this be so hard? The Washington Post supports a
   swipe (I doubt it&amp;#39;s in the print edition order, though). Even the pretty crappy app for
   my local paper, the Minneapolis Star-Tribune, provides for a swipe. The BBC app doesn&amp;#39;t
   seem to support swipe. Perhaps there&amp;#39;s some issue getting feature parity between the Times
   iOS and Android versions. I don&amp;#39;t really care -- I think that on the iOS versions of
   Today&amp;#39;s Paper, it should be super easy to get to the next article in print order.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Last thing. The mobile edition seems incomplete, at least compared to the print edition. I am
looking at p. 10 in Section C, which is the Cooking section with the headline &amp;quot;What to Make
Next Week.&amp;quot; &lt;strong&gt;Suggestion: Please, include it all. It&amp;#39;s simply not Today&amp;#39;s Paper unless everything
is there.&lt;/strong&gt; By the same token, p. A22 is the Weather. Similarly,
where&amp;#39;s the 36 Hours piece on Cape Town, South Africa? &lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  <entry>
    <title>Books I read in 2022 and 2023</title>
    <link rel="alternate" href="http://7fff.com/2023/12/books-i-read-in-2022-and-2023/"/>
    <id>http://7fff.com/2023/12/books-i-read-in-2022-and-2023/</id>
    <published>2023-12-26T10:31:00-06:00</published>
    <updated>2024-01-02T07:16:49-06:00</updated>
    <author>
      <name>jgn</name>
    </author>
    <content type="html">&lt;p&gt;It&amp;#39;s been awhile since I&amp;#39;ve posted anything here, which is terrible but I have reasons. 2022 and 2023 were tough years. My dad died
in January of 2022, and the prior four months or so involved a lot of caregiving. Then after that, there was
straightening out his affairs and his apartment. At the end of 2018, mom died, too. So that&amp;#39;s two
significant deaths, and their aftermaths, over a bit more than 3 years. These 
years were also dominated by acqusitions: First, Iora was aquired by One Medical in September of
2021, which brought a lot of integration work into 2022. Then in 2023, One Medical
was acquired by Amazon. At Iora I had been the VP of Technology, including security and technology
compliance; in July of 2022 I became the Senior Director of Information Security at One Medical.
So things have been busy with a lot of changes.&lt;/p&gt;

&lt;p&gt;As I look back on these years, it&amp;#39;s intersting that I did manage to read 53 books in 2021, which
must have been a kind of salve and distraction after mom died. Since 2021, though I read a paltry (for me)
33 and 30 books.&lt;/p&gt;

&lt;p&gt;So I think I&amp;#39;m going to take this as a resolution and challenge for 2024: Read more. This is probably
going to be a good year for not reading the paper and getting too caught up in politics, which I may
need to do anyway, but not as a time-killer.&lt;/p&gt;

&lt;h3&gt;2022&lt;/h3&gt;

&lt;p&gt;&lt;img src="../../../assets/images/2022-books-read-3cec65f8.png" title="2022 Books Read" alt="2022-books-read.png" width="644" height="1252" /&gt;&lt;/p&gt;

&lt;p&gt;Dad&amp;#39;s death made
2022 an unsteady year emotionally, and I didn&amp;#39;t feel like reading much that was serious. Maybe
that&amp;#39;s not quite true: Apparently I read the new Franzen but I don&amp;#39;t remember any of it. I
did read a number of the 33 1/3 books on record albums, and that was a good distraction -- really comfort
reading for me.  I re-read
some books: Curtis Sittenfeld&amp;#39;s &lt;a href="https://www.goodreads.com/review/show/3794491615"&gt;Prep&lt;/a&gt; and Donna Tartt&amp;#39;s &lt;a href="https://www.goodreads.com/review/show/4540812965"&gt;The Secret History&lt;/a&gt;. More comfort reading
(though the books are not really so comforting come to think of it).&lt;/p&gt;

&lt;p&gt;Looking back on 2022, probably the two best things I read were about the state of Maine, where my
daughter is going to college. I read &lt;a href="https://www.goodreads.com/book/show/103986.The_Lobster_Coast?from_search=true&amp;amp;from_srp=true&amp;amp;qid=lbHUiKIU71&amp;amp;rank=1"&gt;The Lobster Coast&lt;/a&gt;, a history, and &lt;a href="https://www.goodreads.com/book/show/58988394-the-midcoast?ref=rae_0"&gt;The Midcoast&lt;/a&gt;, a novel that
takes that history into account. Both highly recommended.&lt;/p&gt;

&lt;p&gt;I also read some work-related books on security and gave 5 stars to Nicole Pelroth&amp;#39;s &lt;a href="https://www.goodreads.com/review/show/3806829965"&gt;This is
How They Tell Me the World Ends&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;2023&lt;/h3&gt;

&lt;p&gt;&lt;img src="../../../assets/images/2023-books-read-0c7640f1.png" title="2023 Books Read" alt="2023-books-read.png" width="639" height="1076" /&gt;&lt;/p&gt;

&lt;p&gt;I read fewer books in 2023 than in 2022! That makes me look back on 2021, 2019, and 2018 and
wonder how I got so much read. The big standout for 2023 was a collection of books about Amazon:
all pretty good; the one I would recommend to others is &lt;a href="https://www.goodreads.com/review/show/5406985629"&gt;Working Backwards&lt;/a&gt;. I read these because
the acquisition of One Medical by Amazon was finalized in February. Actually the best read about
Amazon was a critique: Kristi Coulter&amp;#39;s &lt;a href="https://www.goodreads.com/book/show/65215677-exit-interview?from_search=true&amp;amp;from_srp=true&amp;amp;qid=izsfsGM496&amp;amp;rank=1"&gt;Exit Interview&lt;/a&gt;.
I&amp;#39;d say more about this but I think as a current employee I should stay mum. &lt;/p&gt;

&lt;h3&gt;And what about 2024?&lt;/h3&gt;

&lt;p&gt;I have a list called &lt;a href="https://www.goodreads.com/review/list/141355-john?ref=nav_mybooks&amp;amp;shelf=books-i-should-stop-putting-off"&gt;&amp;quot;Books I should Stop Putting Off&amp;quot;&lt;/a&gt;,
all killer, no filler, and all non-fiction. If I had to pick one to move to the top of my list, it would probably be &lt;a href="https://www.goodreads.com/book/show/52269471-mindf-ck"&gt;the one on Cambridge Analytica&lt;/a&gt;. I have noticed that when I mention Cambridge Analytica to
people, they don&amp;#39;t know what I&amp;#39;m talking about, and I should be at the ready for more of the story and the facts.&lt;/p&gt;

&lt;p&gt;Maybe I need a new list of fiction that I should prioritize.  Maybe &lt;a href="https://www.goodreads.com/review/list/141355-john?ref=nav_mybooks&amp;amp;shelf=prioritized-fiction-recent"&gt;this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are my stats to date:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;Year&lt;/th&gt;
&lt;th style="text-align: center"&gt;Challenge&lt;/th&gt;
&lt;th style="text-align: center"&gt;Books Read&lt;/th&gt;
&lt;th style="text-align: center"&gt;Pages&lt;/th&gt;
&lt;th style="text-align: center"&gt;Length (Avg)&lt;/th&gt;
&lt;th style="text-align: center"&gt;Rating (Avg)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2023&lt;/td&gt;
&lt;td style="text-align: center"&gt;40&lt;/td&gt;
&lt;td style="text-align: center"&gt;30&lt;/td&gt;
&lt;td style="text-align: center"&gt;8,574&lt;/td&gt;
&lt;td style="text-align: center"&gt;285&lt;/td&gt;
&lt;td style="text-align: center"&gt;3.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2022&lt;/td&gt;
&lt;td style="text-align: center"&gt;40&lt;/td&gt;
&lt;td style="text-align: center"&gt;33&lt;/td&gt;
&lt;td style="text-align: center"&gt;10,923&lt;/td&gt;
&lt;td style="text-align: center"&gt;331&lt;/td&gt;
&lt;td style="text-align: center"&gt;3.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2021&lt;/td&gt;
&lt;td style="text-align: center"&gt;53&lt;/td&gt;
&lt;td style="text-align: center"&gt;53&lt;/td&gt;
&lt;td style="text-align: center"&gt;14,631&lt;/td&gt;
&lt;td style="text-align: center"&gt;275&lt;/td&gt;
&lt;td style="text-align: center"&gt;3.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2020&lt;/td&gt;
&lt;td style="text-align: center"&gt;53&lt;/td&gt;
&lt;td style="text-align: center"&gt;27&lt;/td&gt;
&lt;td style="text-align: center"&gt;9,546&lt;/td&gt;
&lt;td style="text-align: center"&gt;353&lt;/td&gt;
&lt;td style="text-align: center"&gt;3.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2019&lt;/td&gt;
&lt;td style="text-align: center"&gt;53&lt;/td&gt;
&lt;td style="text-align: center"&gt;47&lt;/td&gt;
&lt;td style="text-align: center"&gt;13,798&lt;/td&gt;
&lt;td style="text-align: center"&gt;293&lt;/td&gt;
&lt;td style="text-align: center"&gt;4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2018&lt;/td&gt;
&lt;td style="text-align: center"&gt;31&lt;/td&gt;
&lt;td style="text-align: center"&gt;39&lt;/td&gt;
&lt;td style="text-align: center"&gt;13,692&lt;/td&gt;
&lt;td style="text-align: center"&gt;351&lt;/td&gt;
&lt;td style="text-align: center"&gt;3.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2017&lt;/td&gt;
&lt;td style="text-align: center"&gt;26&lt;/td&gt;
&lt;td style="text-align: center"&gt;34&lt;/td&gt;
&lt;td style="text-align: center"&gt;10,166&lt;/td&gt;
&lt;td style="text-align: center"&gt;299&lt;/td&gt;
&lt;td style="text-align: center"&gt;3.9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;2016&lt;/td&gt;
&lt;td style="text-align: center"&gt;28&lt;/td&gt;
&lt;td style="text-align: center"&gt;30&lt;/td&gt;
&lt;td style="text-align: center"&gt;8,281&lt;/td&gt;
&lt;td style="text-align: center"&gt;276&lt;/td&gt;
&lt;td style="text-align: center"&gt;4.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
  </entry>
</feed>
